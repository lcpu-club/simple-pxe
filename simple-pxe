#!/bin/bash

source functions.sh

export {ARCHLINUX,ROCKY,DEBIAN_CD,DEBIAN,FEDORA,FREEBSD,NETBSD,UBUNTU,UBUNTU_RELEASES}_MIRROR
export {ARCHLINUX,ROCKY,DEBIAN_CD,DEBIAN,FEDORA,FREEBSD,NETBSD,UBUNTU,UBUNTU_RELEASES}_MIRROR_BACKUP

mirror_base="https://mirrors.pku.edu.cn"
ARCHLINUX_MIRROR="${mirror_base}/archlinux"
ROCKY_MIRROR="${mirror_base}/rocky"
DEBIAN_CD_MIRROR="${mirror_base}/debian-cd"
DEBIAN_MIRROR="${mirror_base}/debian"
FEDORA_MIRROR="https://mirrors.tuna.tsinghua.edu.cn/fedora/"
FREEBSD_MIRROR="https://mirrors.ustc.edu.cn/freebsd"
NETBSD_MIRROR="https://mirrors.tuna.tsinghua.edu.cn/NetBSD"
UBUNTU_MIRROR="${mirror_base}/ubuntu"
UBUNTU_RELEASES_MIRROR="${mirror_base}/ubuntu-releases"

export PXE_LOCAL_ROOT PXE_HTTP_ROOT # PXE_NFS_HOST PXE_NFS_ROOT
declare -a PXE_PREPARE PXE_MENUS
source config.local

validate_config() {
	[[ -d "${PXE_LOCAL_ROOT}" ]] || panick "\$PXE_LOCAL_ROOT is not a valid directory"
	[[ -n "${PXE_HTTP_ROOT}" ]] || panick "Please set \$PXE_HTTP_ROOT"
	#[[ -n "${PXE_NFS_HOST}" ]] || panick "Please set \$PXE_NFS_HOST"
	#[[ -n "${PXE_NFS_ROOT}" ]] || panick "Please set \$PXE_NFS_ROOT"
}

parse_header() {
	# PXE_LOCAL_ROOT ->  LOCAL_PATH
	# PXE_HTTP_ROOT  ->  HTTP_PATH
	#                    GRUB_PATH
	# PXE_NFS_ROOT   ->  NFS_PATH

	unset header && declare -Ag header
	local fullpath filename key value

	fullpath="$1"
	filename=$(basename -- "${fullpath}")
	filename="${filename%.*}"

	while read -r line; do
		if [[ "${line}" =~ ^\#([[:alnum:]]+):[[:space:]]*(.*)$ ]]; then
			key="${BASH_REMATCH[1]}"
			value="${BASH_REMATCH[2]}"
			header["${key}"]="${value}"
		fi
	done < "${fullpath}"

	[[ -z "${header[root]}" ]] && header[root]="${filename}"

	ASSET_PATH=$(readlink -m "$(dirname "${fullpath}")/${filename}")
	LOCAL_PATH="${PXE_LOCAL_ROOT}/${header[root]}"
	HTTP_PATH="${PXE_HTTP_ROOT}/${header[root]}"
	GRUB_PATH=$(url2grub "${HTTP_PATH}")
	#NFS_PATH="${PXE_NFS_ROOT}/${header[root]}"
	export ASSET_PATH LOCAL_PATH HTTP_PATH GRUB_PATH # NFS_PATH
}

do_prepare() {
	for item in "${PXE_PREPARE[@]}"; do
		script="prepare.d/${item}.sh"

		if [[ -f "${script}" ]]; then
			echo "Run ${script}..."
			parse_header "${script}"
			mkdir -p "${LOCAL_PATH}"
			bash "${script}"
		fi
	done

	echo "Prepare OK"
}

do_menu() {
	menu_dir="${PXE_LOCAL_ROOT}/menu"
	menu_url=$(url2grub "${PXE_HTTP_ROOT}/menu")
	mkdir -p "${menu_dir}"

	menu_root="${menu_dir}/root.menu"
	temp[menu_root]=$(mktemp)

	intro_flag=0
	if [[ -n "${PXE_INTRO}" ]]; then
		echo "${PXE_INTRO}" > "${PXE_LOCAL_ROOT}/intro.txt"
		intro_flag=1
	fi

	cat >> "${temp[menu_root]}" <<- EOF
		set menu_color_highlight=${GRUB_COLOR_HIGHLIGHT:-white/red}
		set menu_color_normal=${GRUB_COLOR_NORMAL:-white/blue}
		export menu_color_highlight
		export menu_color_normal

		if [ "\$feature_all_video_module" = "y" ]; then
		  insmod all_video
		else
		  for mod in efi_gop efi_uga ieee1275_fb vbe vga video_bochs video_cirrus; do
		    insmod \$mod
		  done
		fi

		menuentry '${PXE_TITLE:-Network Boot Service}' {
		  if [ ${intro_flag} = 1 ]; then
		    set pager=1
		    cat $(url2grub "${PXE_HTTP_ROOT}/intro.txt")
		    echo "Press any key to continue"
		    read
		  fi
		}
	EOF

	for item in "${PXE_MENUS[@]}"; do
		if [[ ${item:0:1} == "-" ]]; then
			grub_menu_sep "<${item:1}>" >> "${temp[menu_root]}"
			continue
		fi

		local script="menu.d/${item}.sh"
		local menu_file="${menu_dir}/${item}.menu"
		export PXE_MENU_URL="${menu_url}/${item}.menu"

		if [[ -f "${script}" ]]; then
			parse_header "${script}"
			echo "Generating menu item '${header[menu]}'..."

			id="do_menu_${item}"
			temp[${id}]=$(mktemp)

			cat >> "${temp[${id}]}" <<- EOF
				menuentry '..' {
				  configfile "${menu_url}/root.menu"
				}
			EOF

			if bash "${script}" >> "${temp[${id}]}"; then
				chmod 644 "${temp[${id}]}"
				mv "${temp[${id}]}" "${menu_file}"
			else
				echo "${item}: failed to generate menu"
			fi
		fi

		if [[ -f "${menu_file}" ]]; then
			cat >> "${temp[menu_root]}" <<- EOF
				menuentry '- ${header[menu]}' {
				  configfile "${PXE_MENU_URL}"
				}
			EOF
		fi
	done

	chmod 644 "${temp[menu_root]}"
	mv "${temp[menu_root]}" "${menu_root}"
}

# main {{{
readonly ACTION="${1:-menu}"
validate_config

case "${ACTION}" in
	prepare)
		do_prepare
		;;
	menu)
		do_menu
		;;
	*)
		panick "Unknown action: ${ACTION}"
		;;
esac
# }}}

# vim: set ts=4 sw=4 sts=4 noexpandtab nosta:
